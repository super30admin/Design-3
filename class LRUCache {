class LRUCache {
    class ListNode{
        ListNode prev,next;
        int key,val;
        ListNode(int key,int val)
        {
            this.key=key;
            this.val=val;
            prev=null;
            next=null;
        }
    }
    
    HashMap<Integer,ListNode> map;
    ListNode head,tail;
    int capacity;
    
    private void removeNode(ListNode node)
    {
        node.prev.next=node.next;
        node.next.prev=node.prev;
        node.next=null;
        node.prev=null;
        
    }
    
    private void addNextTohead(ListNode node)
    {
        node.next=head.next;
        node.prev=head;
        head.next.prev=node;
        head.next=node;
        
    }

    public LRUCache(int capacity) {
        
        map=new HashMap<>();
        head=new ListNode(-1,-1);
        tail=new ListNode(-1,-1);
        head.next=tail;
        tail.prev=head;
        this.capacity=capacity;
    }
    
    public int get(int key) {
        
        if(!map.containsKey(key))
            return -1;
        ListNode node=map.get(key);
        
        removeNode(node);
        addNextTohead(node);
        
        return map.get(key).val;
         
        
    }
    
    public void put(int key, int value) {
          
        if(!map.containsKey(key))
        {
            if(map.size()==capacity)
            {
                map.remove(tail.prev.key);
                removeNode(tail.prev);
            }
            ListNode node=new ListNode(key,value);
            map.put(key,node);
            addNextTohead(node);
            
        }
        else{
            ListNode node=map.get(key);
            node.val=value;
            removeNode(node);
            addNextTohead(node);
        }
        
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */

 // Time Complexity : O(1) //for both put and get
// Space Complexity : O(Capacity)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no