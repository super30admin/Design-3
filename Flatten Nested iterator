Time Complexity : Has next -- (O(1)) , Next -- (O(N)) , O(N+L) ----> Length of the Nested List and the List withn itself
Space Complexity : Length of Recursive Stack 
Approach 1 : DFS
# """
# This is the interface that allows for creating nested lists.
# You should not implement it, or speculate about its implementation
# """
#class NestedInteger:
#    def isInteger(self) -> bool:
#        """
#        @return True if this NestedInteger holds a single integer, rather than a nested list.
#        """
#
#    def getInteger(self) -> int:
#        """
#        @return the single integer that this NestedInteger holds, if it holds a single integer
#        Return None if this NestedInteger holds a nested list
#        """
#
#    def getList(self) -> [NestedInteger]:
#        """
#        @return the nested list that this NestedInteger holds, if it holds a nested list
#        Return None if this NestedInteger holds a single integer
#        """

class NestedIterator:
    def __init__(self, nestedList: [NestedInteger]):
        self.q=collections.deque([])
        self.flatten(nestedList)
        
        
    def flatten(self,nestedList):
        ## Base Case
        if not nestedList:
            return
        ## Logic
        for element in nestedList:  ## For each element i.e nested integer
            if (element.isInteger()):
                self.q.append(element.getInteger())
            else:
                self.flatten(element.getList())
        
    
    def next(self) -> int:

        return self.q.popleft()
        
    
    def hasNext(self) -> bool:
        return len(self.q)>0
        
# Your NestedIterator object will be instantiated and called as such:
# i, v = NestedIterator(nestedList), []
# while i.hasNext(): v.append(i.next())
