{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;}
\margl1440\margr1440\vieww28600\viewh15060\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
class Node:\
    def __init__(self, key, value):\
        self.key, self.val = key, value\
        self.prev = self.next = None\
        \
class LRUCache:\
    \
    def addToHead(self, node):\
        prev, nxt = self.right.prev, self.right\
        prev.next = nxt.prev = node\
        node.next, node.prev = nxt, prev\
    \
    def removeNode(self, node):\
        prev, nxt = node.prev, node.next\
        prev.next, nxt.prev = nxt, prev\
        \
    def __init__(self, capacity: int):\
        self.cap = capacity\
        self.myMap = \{\}\
        self.left , self.right = Node(0,0), Node(0,0)\
        self.left.next, self.right.prev = self.right, self.left\
        \
\
    def get(self, key: int) -> int:\
        \
        if key in self.myMap:\
            self.removeNode(self.myMap[key])\
            self.addToHead(self.myMap[key])\
            return self.myMap[key].val\
        \
        return -1\
\
    def put(self, key: int, value: int) -> None:\
        \
        if key in self.myMap:\
            self.removeNode(self.myMap[key])\
        self.myMap[key] = Node(key, value)\
        self.addToHead(self.myMap[key])\
        if len(self.myMap) > self.cap:\
            lru = self.left.next\
            self.removeNode(lru)\
            del self.myMap[lru.key]\
        \
\
\
# Your LRUCache object will be instantiated and called as such:\
# obj = LRUCache(capacity)\
# param_1 = obj.get(key)\
# obj.put(key,value)}