# LRU Cache

#Time Complexity:
    get(key): O(1) average time complexity.
    put(key, value): O(1) average time complexity.
#Space Complexity: O(capacity) due to the hash map and the doubly linked list.


class ListNode:
    def __init__(self, key=None, value=None):
        self.key = key
        self.value = value
        self.prev = None
        self.next = None

class LRUCache:
    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = {}
        # Create a dummy head and tail to facilitate the operations
        self.head = ListNode()
        self.tail = ListNode()
        self.head.next = self.tail
        self.tail.prev = self.head

    def add_node_to_head(self, node):
        # Add the node right after the dummy head
        node.next = self.head.next
        node.prev = self.head
        self.head.next.prev = node
        self.head.next = node

    def remove_node(self, node):
        # Remove the node from the list
        prev_node = node.prev
        next_node = node.next
        prev_node.next = next_node
        next_node.prev = prev_node

    def move_to_head(self, node):
        # Move the node to the head of the list
        self.remove_node(node)
        self.add_node_to_head(node)

    def get(self, key: int) -> int:
        if key in self.cache:
            node = self.cache[key]
            # Move the accessed node to the head since it's the most recently used
            self.move_to_head(node)
            return node.value
        else:
            return -1

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            # Update the value and move the node to the head
            node = self.cache[key]
            node.value = value
            self.move_to_head(node)
        else:
            if len(self.cache) >= self.capacity:
                # Remove the least recently used node from the tail
                tail_key = self.tail.prev.key
                del self.cache[tail_key]
                self.remove_node(self.tail.prev)
            # Create a new node with the given key and value
            new_node = ListNode(key, value)
            self.cache[key] = new_node
            # Add the new node to the head of the list
            self.add_node_to_head(new_node)
