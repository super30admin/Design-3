//146. LRU Cache
class LRUCache {
    class Node{
        int key,val;
        Node prev;Node next;
        public Node(int key,int val){
            this.key=key;
            this.val=val;
        }
    }
    private void removeNode(Node curr){
        curr.next.prev=curr.prev;
        curr.prev.next=curr.next;

    }
    private void addToHead(Node curr){
        curr.prev=head;
        curr.next=head.next;
        head.next=curr;
        curr.next.prev=curr;
    }
    HashMap<Integer,Node>map;
    Node head;
    Node tail;
    int capacity;
    public LRUCache(int capacity) {
        this.capacity=capacity;
        map=new HashMap<>();
        this.head=new Node(-1,-1);
        this.tail=new Node(-1,-1);
        this.head.next=this.tail;
        this.tail.prev=this.head;

    }
    
    public int get(int key) {
        if(!map.containsKey(key))return -1;
        Node node=map.get(key);
        removeNode(node);
        addToHead(node);
        return node.val;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)){
            //just update the value
            Node node=map.get(key);
            node.val=value;
            removeNode(node);
            addToHead(node);
        }else{
            //if capacity is full
            if(map.size()==capacity){
                //remove lru node
                Node toRemove=tail.prev;
                removeNode(toRemove);//removed from ll
                map.remove(toRemove.key);
            }
            Node newNode=new Node(key,value);
            addToHead(newNode);
            map.put(key,newNode);
        }
        
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */