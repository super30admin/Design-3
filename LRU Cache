class Node:
    def __init__(self, key: int, value: int):
        self.key = key
        self.value = value
        self.prev = self
        self.next = self

class LRUCache:
    
    def __add_node__(self, key, val):
        node = Node(key, val)
        back, front = self.head, self.head.next
        front.prev = back.next = node
        node.next, node.prev = front, back
        self.cache[key] = node
    
    def __remove_node__(self, key):
        node = self.cache[key]
        front, back = node.next, node.prev
        front.prev, back.next = back, front
        del self.cache[key]

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = {}
        self.head = Node(-1, -1)
        self.tail = Node(-1, -1)
        self.head.next = self.tail
        self.tail.prev = self.head

    def get(self, key: int) -> int:
        if key in self.cache:
            val = self.cache[key].value
            self.__remove_node__(key)
            self.__add_node__(key, val)
            return val
        return -1

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.__remove_node__(key)
        elif self.capacity == len(self.cache):
            last_key = self.tail.prev.key
            self.__remove_node__(last_key)
        self.__add_node__(key, value)


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)

# Time Complexity: O(1)
# Space Complexity: O(n)
# Successfully implemented on Leetcode

