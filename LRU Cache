Time Complexity: O(1)
Space Complexity : O(Capacity)
class DLinkedNode(): 
    def __init__(self,key,val):
        self.key = key
        self.val = val
        self.prev = None
        self.next = None
class LRUCache:
    def _add_node_tohead(self,node):   ### O(1)
        node.next=self.head.next
        node.prev=self.head
        
        self.head.next=node
        node.next.prev=node
        
    def _remove_node(self,node):
        node.prev.next=node.next
        node.next.prev=node.prev
    
    def _move_to_head(self,node):
        self._remove_node(node)
        self._add_node(node)
 

    def __init__(self, capacity: int):
        self.cache={}
        self.head,self.tail=DLinkedNode(-1,-1),DLinkedNode(-1,-1)
        self.capacity=capacity
        self.size=0
        self.head.next=self.tail
        self.tail.prev=self.head

    def get(self, key: int) -> int:
            if key in self.cache:
                node=self.cache[key]
                if node:
                    result=node.val
                    self._remove_node(node)
                    self._add_node_tohead(node)
                    return result
            return -1
            

    def put(self, key: int, value: int) -> None:
        ## If node is already existing in my cache
        if key in self.cache:
            node=self.cache[key]
            ### Update the value
            node.val=value
            self._remove_node(node)
            self._add_node_tohead(node)

        else:
            newNode=DLinkedNode(key,value)
            newNode.key=key
            newNode.value=value
            self.cache[key]=newNode
            self._add_node_tohead(newNode)
            self.size+=1
            if self.size>self.capacity:
                ## remove the least recently used node
                tailprev=self.tail.prev
                self._remove_node(tailprev)
                ## Remove from Cache
                del self.cache[tailprev.key]
                self.size-=1
            
# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
