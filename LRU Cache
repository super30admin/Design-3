class LRUCache {
    class Node
    {
        int key;
        int value;
        Node next;
        Node prev;
        
        public Node(int key, int value)
        {
            this.key = key;
            this.value = value;
        }
    }
    
    Node head; 
    Node tail;
    HashMap<Integer, Node> map;
    int capacity;

    public LRUCache(int capacity)
    {
        this.capacity = capacity;
        this.head = new Node(-1,-1);
        this.tail = new Node(-1,-1);
        this.map = new HashMap<>();
        head.next = tail;
        tail.prev = head;
    }
    
    private void removeNode(Node node)
    {
        node.next.prev = node.prev;
        node.prev.next = node.next;
    }
    
    private void addToHead(Node node)
    {
        node.next = head.next;
        node.prev = head;
        head.next = node;
        node.next.prev = node;
    }
    
    public int get(int key) {
        if(!map.containsKey(key))
        {
            return -1;
        }
        
        Node node = map.get(key);
        removeNode(node);
        addToHead(node);
        return node.value;
        
    }
    
    public void put(int key, int value) 
    {
            if(map.containsKey(key))
        {
           Node node = map.get(key);
            node.value = value;
            removeNode(node);
            addToHead(node);
                
        }
        
        else
        {
            if(capacity == map.size())
            {
                //delete the LRU node
                Node tailPrev = tail.prev;
                removeNode(tailPrev);
                map.remove(tailPrev.key);
            }
            
            Node newNode = new Node(key, value);
            addToHead(newNode);
            map.put(key,newNode);
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
