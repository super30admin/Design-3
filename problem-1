/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return empty list if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {
    Stack<Iterator<NestedInteger>> st;
    
    NestedInteger nextele;
    public NestedIterator(List<NestedInteger> nestedList) {
        st.push(NestedInteger.iterator());
        
    }

    @Override
    public Integer next() {
        return nextele.getInteger();
    }

    @Override
    public boolean hasNext() {
        if(!st.isEmpty){
            if(!st.peek().hasNext()){
                st.pop();
            }else if((nextele=st.peek().next()).isInt()) return true;
            else{
                st.push(nextele.getList().Iterator());
            }
            
        }
        return false;
        
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */
