{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;}
\margl1440\margr1440\vieww9680\viewh6580\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
# """\
# This is the interface that allows for creating nested lists.\
# You should not implement it, or speculate about its implementation\
# """\
#class NestedInteger:\
#    def isInteger(self) -> bool:\
#        """\
#        @return True if this NestedInteger holds a single integer, rather than a nested list.\
#        """\
#\
#    def getInteger(self) -> int:\
#        """\
#        @return the single integer that this NestedInteger holds, if it holds a single integer\
#        Return None if this NestedInteger holds a nested list\
#        """\
#\
#    def getList(self) -> [NestedInteger]:\
#        """\
#        @return the nested list that this NestedInteger holds, if it holds a nested list\
#        Return None if this NestedInteger holds a single integer\
#        """\
\
class NestedIterator:\
    def __init__(self, nestedList: [NestedInteger]):\
        self.st = []\
        self.st.append(iter(nestedList))\
        self.nextEl = None\
        \
    \
    def next(self) -> int:\
        return self.nextEl.getInteger()\
        \
    \
    def hasNext(self) -> bool:\
        while self.st:\
            try:\
                x = next(self.st[-1]) \
                if x.isInteger():\
                    self.nextEl = x\
                    return True\
                else:\
                    self.st.append(iter(x.getList()))\
            except StopIteration:\
                self.st.pop() \
        return False\
\
# Your NestedIterator object will be instantiated and called as such:\
# i, v = NestedIterator(nestedList), []\
# while i.hasNext(): v.append(i.next())}