//TC - O(1) - for next(), O(d)- nested list depth
//SC - O(n) + O(d) - number of elements in list and depth of list
public class NestedIterator implements Iterator<Integer> {
    Stack<Iterator<NestedInteger>> st;
    NestedInteger nextEl;
    public NestedIterator(List<NestedInteger> nestedList) {
        st = new Stack<>();
        st.push(nestedList.iterator());
    }

    @Override
    public Integer next() {
       return nextEl.getInteger();
    }

    @Override
    public boolean hasNext() {
         while(!st.isEmpty())
         {
             if(!st.peek().hasNext())
             {
                 st.pop();
             }
             else if((nextEl = st.peek().next()).isInteger())
             {
                 return true;
             }
             else
             {
                 st.push(nextEl.getList().iterator());
             }
         }
        return false;
    }
  
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */
